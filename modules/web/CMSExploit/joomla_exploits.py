#!/usr/bin/python3
from json import load
from core.colors import *
import requests
from urllib3 import disable_warnings
from xmltodict import parse
import os
disable_warnings()
class JoomlaScan:
    pythonpath = os.environ['PYTHONPATH'].split(os.pathsep)
    project_root = os.path.abspath(pythonpath[0])
    def __init__(self,url):
        self.url = url
        self.projectroot = self.project_root

    
    def check_version(self):
        url = self.url
        if not url.endswith('/'):
            url = url +'/administrator/language/en-GB/en-GB.xml'
        else:
            url = url+'administrator/language/en-GB/en-GB.xml'
        try:
            resp = requests.get(url)
            if resp.ok:
                data = parse(resp.content)
                version = data["metafile"]["version"]
                return version
            else:
                return False
        except (requests.RequestException,requests.ReadTimeout )as e:
            print(f"{bad}{red} {e}")
            

    
    def search_vulns(self,version):
        print(f"\n{good}{green} Running Joomla vulnerabilities scanner...")
        vuln_file = self.projectroot+'/db/joomla_vulnerabilities.json'
        with open(vuln_file) as file:
            content = load(file)
            for vuln_title, vuln_version in content.items():
                vuln_version = vuln_version.split("|")
                min_version = vuln_version[0]
                max_version = vuln_version[1]
                if version >= min_version and version <= max_version:
                    print(f"{res}{green}Found: {vuln_title}")
                else:
                    pass
    
    
    def check_defcreds(self):
        url = self.url
        if not url.endswith('/'):
            url = url +'/administrator/index.php'
        else:
            url = url+'administrator/index.php'
            
        creds = {
            'username':'admin',
            'passwd': 'admin'
        }
        try:
            resp = requests.post(url,data=creds)
            if resp.ok:
                print(f'\n\n{yellow}[!]{white} Default credentials found!\nUsername: admin \nPassword: admin')
            else:
                print(f"{bad}{red}Credentials Not Match")
        except requests.RequestException as e:
            print(f"{bad} {red}Error: {e}")
        
    
    def scan(self):
        print(f"{good}{green}Scanning Joomla Website {yellow}{self.url}\n")
        print(f"{good}{green}Detecting Version....\n")
        ver = self.check_version()
        if ver:
            print(f"{res}{green} Found Joomla Version: {yellow}{ver}\n")
            print(f"{good}{green} Searching For Vulnerabilities")
            self.search_vulns(ver)
            print(f"{info}{green} Checking For Default Credentials")
            self.check_defcreds()
        else:
            print(f"{bad} Version Not Found\n")
        print(f"{yellow}Scan Completed")
    
if __name__ == "__main__":
    joom = JoomlaScan('https://www.avetehnika.hr/framaportal.com/')
    joom.scan()